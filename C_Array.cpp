//////////////////////////////////////////////////////////////////////////////////
// [ Array_Class_Source ]
//////////////////////////////////////////////////////////////////////////////////

#include "C_Array.hpp"

//////////////////////////////////////////////////////////////////////////////////
// [ Constructor ]  
//////////////////////////////////////////////////////////////////////////////////
C_Array::C_Array(){
   status  = C_ARRAY_ERROR;
   cItem   = 0;
   nItem   = 0;
   cBuffer = 0;
   pBuffer = 0;
}
//////////////////////////////////////////////////////////////////////////////////
// [ Constructor ]  
//////////////////////////////////////////////////////////////////////////////////
C_Array::C_Array(int nItem, int cItem){
   status = C_ARRAY_ERROR;
   create(nItem, cItem);
}
//////////////////////////////////////////////////////////////////////////////////
// [ Destructor ]
//////////////////////////////////////////////////////////////////////////////////
C_Array::~C_Array(){
   destroy();
}
//////////////////////////////////////////////////////////////////////////////////
// [ Copy Constructor ]
//////////////////////////////////////////////////////////////////////////////////
C_Array::C_Array(const C_Array& rCArray){

   if(status != C_ARRAY_ERROR) destroy(); 

   status  = C_ARRAY_ERROR;
   cItem   = rCArray.getcItem();
   nItem   = rCArray.getnItem();
   cBuffer = cItem * nItem;

   if(cBuffer){
      pBuffer = new char[cBuffer];
      status  = C_ARRAY_READY;
      
      char* pTempBuffer = rCArray.getpBuffer();
      
      if(pBuffer && pTempBuffer) memcpy(pBuffer, pTempBuffer, cBuffer);
   }
}
//////////////////////////////////////////////////////////////////////////////////
// [ operator = ]
//////////////////////////////////////////////////////////////////////////////////
C_Array & C_Array::operator=(const C_Array& rCArray){

   if(this == &rCArray) return(*this);

   if(status != C_ARRAY_ERROR) destroy(); 

   status  = C_ARRAY_ERROR;
   cItem   = rCArray.getcItem();
   nItem   = rCArray.getnItem();
   cBuffer = cItem * nItem;

   if(cBuffer){
      pBuffer = new char[cBuffer];
      status  = C_ARRAY_READY;
      char* pTempBuffer = rCArray.getpBuffer();
      if(pBuffer && pTempBuffer) memcpy(pBuffer, pTempBuffer, cBuffer);
   }

   return(*this);
}
//////////////////////////////////////////////////////////////////////////////////
// [ create ]
//////////////////////////////////////////////////////////////////////////////////
int C_Array::create(int _nItem, int _cItem){
  
   if(status == C_ARRAY_READY) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_EXIST);

   //////////////////////////////////////////////

   pBuffer = new char[_nItem * _cItem];

   //////////////////////////////////////////////

   if(!pBuffer) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_PTR);
      
   status  = C_ARRAY_READY;

   nItem   = _nItem;
   cItem   = _cItem;
   cBuffer = _nItem * _cItem;

   memset(pBuffer, 0, cBuffer);

   return(C_ARRAY_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [ destroy ]
//////////////////////////////////////////////////////////////////////////////////
int C_Array::destroy(){
  
   if(status == C_ARRAY_ERROR) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_EXIST); 
  
   //////////////////////////////////////////////

   delete [] pBuffer;

   //////////////////////////////////////////////

   status  = C_ARRAY_ERROR;

   nItem   = 0;
   cItem   = 0;
   cBuffer = 0;
   pBuffer = 0;

   return(C_ARRAY_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [ getpItem ]
//////////////////////////////////////////////////////////////////////////////////
char* C_Array::getpItem(int offset){
  
   if(status == C_ARRAY_ERROR) return((char*)(C_ARRAY_ERROR)); 

   return(pBuffer + (offset * cItem));
}
//////////////////////////////////////////////////////////////////////////////////
// [ getItem ]
//////////////////////////////////////////////////////////////////////////////////
int C_Array::getItem(int offset, void* pDataDst){

   if(status == C_ARRAY_ERROR) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_EXIST); 

   if(!pDataDst) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_PTR);

   if(offset > nItem) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_OVER);
	 
   char* pDataSrc = (char*) pBuffer;
   pDataSrc += offset * cItem;

   //////////////////////////////////////////////

   memcpy(pDataDst, pDataSrc, cItem);

   //////////////////////////////////////////////

   return(C_ARRAY_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [ setItem ]
//////////////////////////////////////////////////////////////////////////////////
int C_Array::setItem(int offset, void* pDataSrc){

   if(!pDataSrc) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_PTR); 

   if(offset > nItem) return(C_ARRAY_ERROR ^ C_ARRAY_SUB_OVER); 
	 
   char* pDataDst = (char*) pBuffer;
   pDataDst += offset * cItem;

   //////////////////////////////////////////////

   memcpy(pDataDst, pDataSrc, cItem);

   //////////////////////////////////////////////

   return(C_ARRAY_READY);
}

